# This is a makefile intended for compiling simple C++ projects.
# It assumes that you have one or more source files in the main directory,
#    each of which contains an "int main()".
# There may also be a "src" directory, containing additional source files.
# These are compiled into a single library, specified by the LIB_NAME variable.
# All include files will be automatically listed as dependencies.

# Default build variables, can be overridden by command line options.

LIB_NAME = MyLibrary

CXX      = g++
CPPFLAGS =
CXXFLAGS = -g -O3
LDFLAGS  =
LDLIBS   =
RM       = rm -f

# Additional flags that are necessary to compile.
# Even if not specified on the command line, these should be present.

override CPPFLAGS += -Iinclude
override CXXFLAGS += -fPIC
override LDFLAGS  += -Llib -Wl,-rpath,\$$ORIGIN/../lib
override LDLIBS   += -l$(LIB_NAME)

# EVERYTHING PAST HERE SHOULD WORK AUTOMATICALLY

.SECONDARY:

# Find the source files that will be used.
EXE_SRC_FILES = $(wildcard *.cc)
EXECUTABLES = $(patsubst %.cc,bin/%,$(EXE_SRC_FILES))
SRC_FILES = $(wildcard src/*.cc)
O_FILES = $(patsubst %.cc,build/%.o,$(SRC_FILES))

all: $(EXECUTABLES) lib/lib$(LIB_NAME).so

# Update dependencies with each compilation
override CPPFLAGS += -MMD
-include $(shell find build -name "*.d" 2> /dev/null)

bin/%: build/%.o | lib/lib$(LIB_NAME).so
	@echo "Building $@"
	@mkdir -p $(@D)
	@$(CXX) $(LDFLAGS) $< $(LDLIBS) -o $@

lib/lib$(LIB_NAME).so: $(O_FILES)
	@echo "Building $@"
	@mkdir -p $(@D)
	@$(CXX) $^ -shared -Wl,-soname,lib$(LIB_NAME).so -o $@

build/%.o: %.cc
	@echo "Building $@"
	@mkdir -p $(@D)
	@$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $< -o $@

clean:
	@echo "Cleaning"
	@$(RM) -r bin build lib
